{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNoZy28Casg93DpExzsqMD8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wZ_mU_pDue7n","executionInfo":{"status":"ok","timestamp":1741806868039,"user_tz":300,"elapsed":108,"user":{"displayName":"Wilson Andres Ramirez Rios","userId":"17887527958485621131"}},"outputId":"4cece1bd-394f-489f-fcf0-21557bd52002"},"outputs":[{"output_type":"stream","name":"stdout","text":["import numpy as np\n","import statistics\n","\n","def calcular_estadisticas(data):\n","    media = statistics.mean(data)\n","    mediana = statistics.median(data)\n","    moda = statistics.mode(data) if len(data) == len(set(data)) else \"No hay moda única\"\n","    varianza = statistics.variance(data)\n","    desviacion_estandar = statistics.stdev(data)\n","    \n","    # Usando numpy para calcular los mismos valores\n","    media_np = np.mean(data)\n","    mediana_np = np.median(data)\n","    moda_np = np.argmax(np.bincount(data))  # Calcula la moda usando numpy\n","    varianza_np = np.var(data)\n","    desviacion_estandar_np = np.std(data)\n","\n","    return {\n","        \"media\": media,\n","        \"mediana\": mediana,\n","        \"moda\": moda,\n","        \"varianza\": varianza,\n","        \"desviacion_estandar\": desviacion_estandar,\n","        \"media_np\": media_np,\n","        \"mediana_np\": mediana_np,\n","        \"moda_np\": moda_np,\n","        \"varianza_np\": varianza_np,\n","        \"desviacion_estandar_np\": desviacion_estandar_np\n","    }\n"]}],"source":["import numpy as np\n","import statistics\n","\n","def calcular_estadisticas(data):\n","    media = statistics.mean(data)\n","    mediana = statistics.median(data)\n","    moda = statistics.mode(data) if len(data) == len(set(data)) else \"No hay moda única\"\n","    varianza = statistics.variance(data)\n","    desviacion_estandar = statistics.stdev(data)\n","\n","    # Usando numpy para calcular los mismos valores\n","    media_np = np.mean(data)\n","    mediana_np = np.median(data)\n","    moda_np = np.argmax(np.bincount(data))  # Calcula la moda usando numpy\n","    varianza_np = np.var(data)\n","    desviacion_estandar_np = np.std(data)\n","\n","    return {\n","        \"media\": media,\n","        \"mediana\": mediana,\n","        \"moda\": moda,\n","        \"varianza\": varianza,\n","        \"desviacion_estandar\": desviacion_estandar,\n","        \"media_np\": media_np,\n","        \"mediana_np\": mediana_np,\n","        \"moda_np\": moda_np,\n","        \"varianza_np\": varianza_np,\n","        \"desviacion_estandar_np\": desviacion_estandar_np\n","    }\n"]},{"cell_type":"code","source":["import requests\n","import concurrent.futures\n","from estadisticas import calcular_estadisticas\n","\n","# URL de la API para obtener las temperaturas\n","API_URL = \"https://weather.siel.com.co/city/{city}/temp/max\"\n","TOKEN = \"Bearer secret-token-1234\"  # Sustituye con tu token real\n","\n","# Función para obtener la temperatura máxima de una ciudad\n","def obtener_temperatura(city):\n","    headers = {'Authorization': TOKEN}\n","    try:\n","        response = requests.get(API_URL.format(city=city), headers=headers)\n","        response.raise_for_status()  # Lanza un error si el código de estado no es 200\n","        return response.json()['temperature']  # Asumimos que el JSON tiene el campo 'temperature'\n","    except requests.exceptions.RequestException as e:\n","        print(f\"Error al obtener datos de {city}: {e}\")\n","        return None\n","\n","# Función para obtener las temperaturas de varias ciudades de forma concurrente\n","def obtener_temperaturas_concurrentes(cities):\n","    with concurrent.futures.ThreadPoolExecutor() as executor:\n","        temperaturas = list(executor.map(obtener_temperatura, cities))\n","    return temperaturas\n","\n","# Función principal para calcular las estadísticas\n","def calcular_estadisticas_temperaturas(cities):\n","    temperaturas = obtener_temperaturas_concurrentes(cities)\n","    # Filtramos las temperaturas válidas (no None)\n","    temperaturas_validas = [temp for temp in temperaturas if temp is not None]\n","\n","    if len(temperaturas_validas) > 0:\n","        estadisticas = calcular_estadisticas(temperaturas_validas)\n","        return estadisticas\n","    else:\n","        return \"No se obtuvieron temperaturas válidas.\"\n","\n","# Lista de ciudades para obtener las temperaturas\n","cities = [\"paris\", \"new_york\", \"madrid\", \"london\", \"tokyo\", \"sydney\", \"beijing\", \"moscow\", \"berlin\", \"dubai\"]\n","\n","# Calcular y mostrar las estadísticas\n","estadisticas = calcular_estadisticas_temperaturas(cities)\n","\n","# Imprimir los resultados\n","print(\"\\nEstadísticas de temperaturas obtenidas:\")\n","print(estadisticas)\n"],"metadata":{"id":"j7gcqYFYykMC"},"execution_count":null,"outputs":[]}]}